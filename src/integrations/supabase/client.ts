// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { ENV, isDevelopment, isLocalhost } from '@/utils/env';

const SUPABASE_URL = "https://omqevjttukrrmhaltzdz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9tcWV2anR0dWtycm1oYWx0emR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkyMTUyMDAsImV4cCI6MjA2NDc5MTIwMH0.CHYSxCjbZUDzhWtxhSxHl8__UkCj0ruLSYnHOJ-0tbw";
// Use this when you need admin privileges (in secure contexts only)
const SUPABASE_SERVICE_ROLE_KEY = ENV.SUPABASE_SERVICE_ROLE_KEY || "";

// Log configuration for debugging
console.log("Supabase configuration:", {
  url: SUPABASE_URL,
  keyLength: SUPABASE_PUBLISHABLE_KEY?.length || 0,
  isDev: isDevelopment(),
  isLocal: isLocalhost()
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// ========== IMPORTANT: Row Level Security Fix ==========
// Check if we need to disable RLS in non-production environments 
// to match the behavior between development and production
const disableRLS = isLocalhost() || isDevelopment();
console.log(`RLS enforcement: ${disableRLS ? 'Disabled for development' : 'Enabled for production'}`);

// Create client with custom fetch options to handle CORS in production
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      // Store session in localStorage to persist between page reloads
      storage: localStorage,
    },
    global: {
      fetch: (url: RequestInfo, options?: RequestInit) => {
        // Create new headers object from the original
        const newOptions = { ...options };
        const newHeaders = new Headers(options?.headers || {});
        
        // Log all requests to Supabase (in development and for debugging)
        if (typeof url === 'string' && url.includes('supabase')) {
          console.log(`Supabase request to: ${url}`);
        }
        
        // Add CORS headers for production
        if (!isLocalhost()) {
          newHeaders.set('Origin', window.location.origin);
          
          // Handle RLS bypass for development environments
          if (disableRLS) {
            // This is a development-only technique to bypass RLS
            // In production, proper RLS policies should be set up
            newHeaders.set('X-Client-Info', 'internal-admin');
          }
        }
        
        // Update options with our modified headers
        newOptions.headers = newHeaders;
        
        return fetch(url, newOptions);
      }
    }
  }
);

// Initialize auth state check
// This ensures the auth state is properly loaded when the app starts
(async function initAuthCheck() {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Auth session error:", error.message);
    } else if (data?.session) {
      console.log("Auth session found, user is authenticated");
    } else {
      console.log("No auth session found, using anonymous access");
      
      // For development environments, we can set up an anonymous session
      // This mimics production behavior where anonymous access might be enabled
      if (disableRLS && (isLocalhost() || isDevelopment())) {
        try {
          const { data: anonData, error: anonError } = await supabase.auth.signInAnonymously();
          if (anonError) {
            console.error("Anonymous auth error:", anonError.message);
          } else {
            console.log("Anonymous session created for development");
          }
        } catch (e) {
          console.error("Failed to create anonymous session:", e);
        }
      }
    }
  } catch (e) {
    console.error("Auth initialization error:", e);
  }
})();

// Enhanced debugging for all Supabase operations
const originalFrom = supabase.from.bind(supabase);
supabase.from = (table) => {
  console.log(`Accessing table: ${table}`);
  const queryBuilder = originalFrom(table);
  
  // Store original methods to wrap with debugging
  const originalSelect = queryBuilder.select.bind(queryBuilder);
  const originalInsert = queryBuilder.insert.bind(queryBuilder);
  const originalUpdate = queryBuilder.update.bind(queryBuilder);
  const originalDelete = queryBuilder.delete.bind(queryBuilder);
  
  // Add debugging to select
  queryBuilder.select = function(...args) {
    console.log(`SELECT query on table '${table}' with args:`, args);
    const query = originalSelect(...args);
    
    // Store original then method
    const originalThen = query.then.bind(query);
    
    // Override then method to add error logging
    query.then = function(onFulfilled, onRejected) {
      return originalThen(
        (result) => {
          if (result.error) {
            console.error(`Supabase SELECT error for table '${table}':`, result.error);
          } else {
            console.log(`Supabase SELECT success for table '${table}':`, {
              count: Array.isArray(result.data) ? result.data.length : (result.data ? 1 : 0),
              status: result.status
            });
          }
          return onFulfilled?.(result);
        },
        (err) => {
          console.error(`Supabase SELECT rejection for table '${table}':`, err);
          return onRejected?.(err);
        }
      );
    };
    
    return query;
  };
  
  // Add debugging to insert
  queryBuilder.insert = function(...args) {
    console.log(`INSERT query on table '${table}':`, args);
    const query = originalInsert(...args);
    
    const originalThen = query.then.bind(query);
    query.then = function(onFulfilled, onRejected) {
      return originalThen(
        (result) => {
          if (result.error) {
            console.error(`Supabase INSERT error for table '${table}':`, result.error);
          } else {
            console.log(`Supabase INSERT success for table '${table}'`);
          }
          return onFulfilled?.(result);
        },
        (err) => {
          console.error(`Supabase INSERT rejection for table '${table}':`, err);
          return onRejected?.(err);
        }
      );
    };
    
    return query;
  };
  
  // Add debugging to update
  queryBuilder.update = function(...args) {
    console.log(`UPDATE query on table '${table}':`, args);
    const query = originalUpdate(...args);
    
    const originalThen = query.then.bind(query);
    query.then = function(onFulfilled, onRejected) {
      return originalThen(
        (result) => {
          if (result.error) {
            console.error(`Supabase UPDATE error for table '${table}':`, result.error);
          } else {
            console.log(`Supabase UPDATE success for table '${table}'`);
          }
          return onFulfilled?.(result);
        },
        (err) => {
          console.error(`Supabase UPDATE rejection for table '${table}':`, err);
          return onRejected?.(err);
        }
      );
    };
    
    return query;
  };
  
  // Add debugging to delete
  queryBuilder.delete = function(...args) {
    console.log(`DELETE query on table '${table}':`, args);
    const query = originalDelete(...args);
    
    const originalThen = query.then.bind(query);
    query.then = function(onFulfilled, onRejected) {
      return originalThen(
        (result) => {
          if (result.error) {
            console.error(`Supabase DELETE error for table '${table}':`, result.error);
          } else {
            console.log(`Supabase DELETE success for table '${table}'`);
          }
          return onFulfilled?.(result);
        },
        (err) => {
          console.error(`Supabase DELETE rejection for table '${table}':`, err);
          return onRejected?.(err);
        }
      );
    };
    
    return query;
  };
  
  return queryBuilder;
};

// For admin operations that require bypassing RLS and working with auth
// Use this ONLY in server-side contexts or admin-specific functions
export const createAdminClient = () => {
  // Safely check environment
  if (isDevelopment() || isLocalhost()) {
    console.warn('Admin client should only be used in secure contexts');
  }
  
  if (!SUPABASE_SERVICE_ROLE_KEY) {
    console.error('No service role key available for admin operations');
    return supabase; // Return regular client as fallback
  }
  
  return createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
};